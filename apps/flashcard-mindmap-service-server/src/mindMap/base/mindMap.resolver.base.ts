/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MindMap } from "./MindMap";
import { MindMapCountArgs } from "./MindMapCountArgs";
import { MindMapFindManyArgs } from "./MindMapFindManyArgs";
import { MindMapFindUniqueArgs } from "./MindMapFindUniqueArgs";
import { CreateMindMapArgs } from "./CreateMindMapArgs";
import { UpdateMindMapArgs } from "./UpdateMindMapArgs";
import { DeleteMindMapArgs } from "./DeleteMindMapArgs";
import { Pdf } from "../../pdf/base/Pdf";
import { MindMapService } from "../mindMap.service";
@graphql.Resolver(() => MindMap)
export class MindMapResolverBase {
  constructor(protected readonly service: MindMapService) {}

  async _mindMapsMeta(
    @graphql.Args() args: MindMapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MindMap])
  async mindMaps(
    @graphql.Args() args: MindMapFindManyArgs
  ): Promise<MindMap[]> {
    return this.service.mindMaps(args);
  }

  @graphql.Query(() => MindMap, { nullable: true })
  async mindMap(
    @graphql.Args() args: MindMapFindUniqueArgs
  ): Promise<MindMap | null> {
    const result = await this.service.mindMap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MindMap)
  async createMindMap(
    @graphql.Args() args: CreateMindMapArgs
  ): Promise<MindMap> {
    return await this.service.createMindMap({
      ...args,
      data: {
        ...args.data,

        pdf: args.data.pdf
          ? {
              connect: args.data.pdf,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MindMap)
  async updateMindMap(
    @graphql.Args() args: UpdateMindMapArgs
  ): Promise<MindMap | null> {
    try {
      return await this.service.updateMindMap({
        ...args,
        data: {
          ...args.data,

          pdf: args.data.pdf
            ? {
                connect: args.data.pdf,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MindMap)
  async deleteMindMap(
    @graphql.Args() args: DeleteMindMapArgs
  ): Promise<MindMap | null> {
    try {
      return await this.service.deleteMindMap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Pdf, {
    nullable: true,
    name: "pdf",
  })
  async getPdf(@graphql.Parent() parent: MindMap): Promise<Pdf | null> {
    const result = await this.service.getPdf(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
