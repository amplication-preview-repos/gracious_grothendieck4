/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MindMap as PrismaMindMap,
  Pdf as PrismaPdf,
} from "@prisma/client";

export class MindMapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MindMapCountArgs, "select">): Promise<number> {
    return this.prisma.mindMap.count(args);
  }

  async mindMaps(args: Prisma.MindMapFindManyArgs): Promise<PrismaMindMap[]> {
    return this.prisma.mindMap.findMany(args);
  }
  async mindMap(
    args: Prisma.MindMapFindUniqueArgs
  ): Promise<PrismaMindMap | null> {
    return this.prisma.mindMap.findUnique(args);
  }
  async createMindMap(args: Prisma.MindMapCreateArgs): Promise<PrismaMindMap> {
    return this.prisma.mindMap.create(args);
  }
  async updateMindMap(args: Prisma.MindMapUpdateArgs): Promise<PrismaMindMap> {
    return this.prisma.mindMap.update(args);
  }
  async deleteMindMap(args: Prisma.MindMapDeleteArgs): Promise<PrismaMindMap> {
    return this.prisma.mindMap.delete(args);
  }

  async getPdf(parentId: string): Promise<PrismaPdf | null> {
    return this.prisma.mindMap
      .findUnique({
        where: { id: parentId },
      })
      .pdf();
  }
}
