/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MindMapService } from "../mindMap.service";
import { MindMapCreateInput } from "./MindMapCreateInput";
import { MindMap } from "./MindMap";
import { MindMapFindManyArgs } from "./MindMapFindManyArgs";
import { MindMapWhereUniqueInput } from "./MindMapWhereUniqueInput";
import { MindMapUpdateInput } from "./MindMapUpdateInput";

export class MindMapControllerBase {
  constructor(protected readonly service: MindMapService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MindMap })
  async createMindMap(
    @common.Body() data: MindMapCreateInput
  ): Promise<MindMap> {
    return await this.service.createMindMap({
      data: {
        ...data,

        pdf: data.pdf
          ? {
              connect: data.pdf,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        nodes: true,

        pdf: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MindMap] })
  @ApiNestedQuery(MindMapFindManyArgs)
  async mindMaps(@common.Req() request: Request): Promise<MindMap[]> {
    const args = plainToClass(MindMapFindManyArgs, request.query);
    return this.service.mindMaps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        nodes: true,

        pdf: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MindMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mindMap(
    @common.Param() params: MindMapWhereUniqueInput
  ): Promise<MindMap | null> {
    const result = await this.service.mindMap({
      where: params,
      select: {
        createdAt: true,
        id: true,
        nodes: true,

        pdf: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MindMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMindMap(
    @common.Param() params: MindMapWhereUniqueInput,
    @common.Body() data: MindMapUpdateInput
  ): Promise<MindMap | null> {
    try {
      return await this.service.updateMindMap({
        where: params,
        data: {
          ...data,

          pdf: data.pdf
            ? {
                connect: data.pdf,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          nodes: true,

          pdf: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MindMap })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMindMap(
    @common.Param() params: MindMapWhereUniqueInput
  ): Promise<MindMap | null> {
    try {
      return await this.service.deleteMindMap({
        where: params,
        select: {
          createdAt: true,
          id: true,
          nodes: true,

          pdf: {
            select: {
              id: true,
            },
          },

          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
